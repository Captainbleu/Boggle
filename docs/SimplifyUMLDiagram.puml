@startuml

namespace Boggle {
    class Die {
        - char[] faces
        - char visibleFace
        + Die(Random random)
        + char VisibleFace { get; }
        + int Points { get; }
    }

    class Game {
        - static Stopwatch playerStopwatch
        - static int turnTime
        - static int totalTurns
        - static List<Player> playerList
        - static int boardSize
        - static EmbedText scoreText
        + static List<Player> PlayerList { get; }
        + static void Main()
    }

    class Board {
        - static Random r
        - static Die[,] board
        - static List<string> foundWords
        + static void Initialize(int size)
        + static void Launch()
        + static bool TestWord(string word, out string message)
        + static bool Contains(string word)
        + static string toString()
        + static List<List<char>> ToCharList()
    }

    class Language {
        - static string languageCode
        - static SortedList<char, int> pointsPerLetter
        - static SortedList<char, int> maxOccurrencesPerLetter
        - static char[] letterProbabilities
        + static void Initialize(string language)
        + static string LanguageCode { get; }
        + static SortedList<char, int> MaxOccurrences { get; set; }
        + static SortedList<char, int> PointsPerLetter { get; }
        + static char GetLetterByProbability(int probability)
        + static int CalculateScore(string word)
    }

    class WordCloud {
        + static void GenerateWordCloud(Dictionary<string, int> words, string name)
    }

    class CustomDictionary {
        - static SortedDictionary<int, string[]> wordsByLength
        - static SortedDictionary<char, string[]> wordsByLetter
        - static SortedDictionary<int, int> wordCountByLength
        - static SortedDictionary<char, int> wordCountByLetter
        + static void Initialize()
        + static bool Contains(string word)
        + static void QuickSort(string[] array, int start, int end)
    }

    class Player {
        - string name
        - int score
        - Dictionary<string, int> foundWords
        + Player(string name)
        + string Name { get; }
        + int Score { get; }
        + Dictionary<string, int> FoundWords { get; }
        + bool Contains(string word)
        + void AddWord(string word)
        + string ToString()
    }
    
     Game "1" *-- "2..*" Player
     Game "1" *-- "1" Board
     Language "1" ..> "1" Board
     Game "1" *-- "1" CustomDictionary
     Language "1" ..> "1" CustomDictionary
     Language "1" ..> "1" Die
     Board "1" *-- "1..*" Die
     Player "1" *-- "1" WordCloud
}

@enduml